// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ApplicationRecordDao is the data access object for table applicationRecord.
type ApplicationRecordDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns ApplicationRecordColumns // columns contains all the column names of Table for convenient usage.
}

// ApplicationRecordColumns defines and stores column names for table applicationRecord.
type ApplicationRecordColumns struct {
	Id           string // 申请记录ID
	CreateTime   string // 创建时间
	UpdateTime   string // 更新时间
	DeleteTime   string // 删除时间
	UserId       string // 用户ID
	ResourceType string // 资源类型 1:chainTemplate
	ResourceId   string // 资源id
	Operation    string // 操作类型 1:下架
	Reason       string // 申请原因
	Status       string // 申请状态 1:未处理 2:已通过 3:已驳回
}

// applicationRecordColumns holds the columns for table applicationRecord.
var applicationRecordColumns = ApplicationRecordColumns{
	Id:           "id",
	CreateTime:   "createTime",
	UpdateTime:   "updateTime",
	DeleteTime:   "deleteTime",
	UserId:       "userId",
	ResourceType: "resourceType",
	ResourceId:   "resourceId",
	Operation:    "operation",
	Reason:       "reason",
	Status:       "status",
}

// NewApplicationRecordDao creates and returns a new DAO object for table data access.
func NewApplicationRecordDao() *ApplicationRecordDao {
	return &ApplicationRecordDao{
		group:   "default",
		table:   "applicationRecord",
		columns: applicationRecordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ApplicationRecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ApplicationRecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ApplicationRecordDao) Columns() ApplicationRecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ApplicationRecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ApplicationRecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ApplicationRecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

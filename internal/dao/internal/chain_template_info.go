// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ChainTemplateInfoDao is the data access object for table chainTemplateInfo.
type ChainTemplateInfoDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns ChainTemplateInfoColumns // columns contains all the column names of Table for convenient usage.
}

// ChainTemplateInfoColumns defines and stores column names for table chainTemplateInfo.
type ChainTemplateInfoColumns struct {
	Id                      string // 模版ID
	CreateTime              string // 创建时间
	UpdateTime              string // 更新时间
	DeleteTime              string // 删除时间
	UserId                  string // 用户ID
	ChainTemplateName       string // 模版名称
	FatherId                string // 父ID
	Version                 string // 版本号
	VersionDesc             string // 版本描述
	Desc                    string // 描述
	Icon                    string // icon图
	DownloadCount           string // 下载次数
	ChainLevel              string // 层级
	ChainTemplateInfoStatus string // 上架下架状态 1：上架 2:下架
	BotId                   string // 如果当前版本上架，则对应当前版本的sysbot的id
	TemplateId              string // 关联的模版id
}

// chainTemplateInfoColumns holds the columns for table chainTemplateInfo.
var chainTemplateInfoColumns = ChainTemplateInfoColumns{
	Id:                      "id",
	CreateTime:              "createTime",
	UpdateTime:              "updateTime",
	DeleteTime:              "deleteTime",
	UserId:                  "userId",
	ChainTemplateName:       "chainTemplateName",
	FatherId:                "fatherId",
	Version:                 "version",
	VersionDesc:             "versionDesc",
	Desc:                    "desc",
	Icon:                    "icon",
	DownloadCount:           "downloadCount",
	ChainLevel:              "chainLevel",
	ChainTemplateInfoStatus: "chainTemplateInfoStatus",
	BotId:                   "botId",
	TemplateId:              "templateId",
}

// NewChainTemplateInfoDao creates and returns a new DAO object for table data access.
func NewChainTemplateInfoDao() *ChainTemplateInfoDao {
	return &ChainTemplateInfoDao{
		group:   "default",
		table:   "chainTemplateInfo",
		columns: chainTemplateInfoColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ChainTemplateInfoDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ChainTemplateInfoDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ChainTemplateInfoDao) Columns() ChainTemplateInfoColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ChainTemplateInfoDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ChainTemplateInfoDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ChainTemplateInfoDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

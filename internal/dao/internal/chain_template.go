// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ChainTemplateDao is the data access object for table chainTemplate.
type ChainTemplateDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns ChainTemplateColumns // columns contains all the column names of Table for convenient usage.
}

// ChainTemplateColumns defines and stores column names for table chainTemplate.
type ChainTemplateColumns struct {
	Id                  string // 模版ID
	CreateTime          string // 创建时间
	UpdateTime          string // 更新时间
	DeleteTime          string // 删除时间
	UserId              string // 用户ID
	ChainTemplateName   string // 模版名称
	Nodes               string // 节点数据
	Edges               string // 边缘数据
	FatherId            string // 父ID
	Version             string // 版本号
	VersionDesc         string // 版本描述
	Desc                string // 描述
	Icon                string // icon图
	ChainLevel          string // 层级
	ApproveStatus       string // 审批状态  1：待审批 2:已通过 3:已驳回
	ChainTemplateStatus string // 上架下架状态 1：上架 2:下架
	BotId               string // 如果当前版本上架，则对应当前版本的sysbot的id
	UseKnowledge        string // 是否使用知识库
}

// chainTemplateColumns holds the columns for table chainTemplate.
var chainTemplateColumns = ChainTemplateColumns{
	Id:                  "id",
	CreateTime:          "createTime",
	UpdateTime:          "updateTime",
	DeleteTime:          "deleteTime",
	UserId:              "userId",
	ChainTemplateName:   "chainTemplateName",
	Nodes:               "nodes",
	Edges:               "edges",
	FatherId:            "fatherId",
	Version:             "version",
	VersionDesc:         "versionDesc",
	Desc:                "desc",
	Icon:                "icon",
	ChainLevel:          "chainLevel",
	ApproveStatus:       "approveStatus",
	ChainTemplateStatus: "chainTemplateStatus",
	BotId:               "botId",
	UseKnowledge:        "useKnowledge",
}

// NewChainTemplateDao creates and returns a new DAO object for table data access.
func NewChainTemplateDao() *ChainTemplateDao {
	return &ChainTemplateDao{
		group:   "default",
		table:   "chainTemplate",
		columns: chainTemplateColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ChainTemplateDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ChainTemplateDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ChainTemplateDao) Columns() ChainTemplateColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ChainTemplateDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ChainTemplateDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ChainTemplateDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
